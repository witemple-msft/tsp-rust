// Generated by Microsoft TypeSpec

pub mod models {
    pub mod all {
        /// Some namespace documentation.
        pub mod example {
            /// Some example operations.
            pub trait Operations {
                /// The error type which may be returned by this trait's operations.
                type Error<OperationError>;

                /// A POST operation that uses multipart/form-data.
                fn mpfd(
                    &mut self,
                    data: impl AsRef<[u8]>,
                ) -> impl ::tsp_rust::OperationFuture<
                    super::super::synthetic::MpfdSuccessResponse,
                    Self::Error<::core::convert::Infallible>,
                >;

                /// A POST operation that uses application/json.
                fn json(
                    &mut self,
                    payload: Foo,
                ) -> impl ::tsp_rust::OperationFuture<Output, Self::Error<::core::convert::Infallible>>;
            }

            #[derive(
                Debug,
                Clone,
                PartialEq,
                ::tsp_rust::vendored::serde::Deserialize,
                ::tsp_rust::vendored::serde::Serialize,
            )]
            #[serde(crate = "::tsp_rust::vendored::serde")]
            pub struct Error {
                pub body: super::super::synthetic::ErrorBody,
            }

            /// A Foo example model.
            #[derive(
                Debug,
                Clone,
                PartialEq,
                ::tsp_rust::vendored::serde::Deserialize,
                ::tsp_rust::vendored::serde::Serialize,
            )]
            #[serde(crate = "::tsp_rust::vendored::serde")]
            pub struct Foo {
                /// A string field.
                pub a: String,
                /// A number field.
                pub b: u32,
            }

            /// An Output example model.
            #[derive(
                Debug,
                Clone,
                PartialEq,
                ::tsp_rust::vendored::serde::Deserialize,
                ::tsp_rust::vendored::serde::Serialize,
            )]
            #[serde(crate = "::tsp_rust::vendored::serde")]
            pub struct Output {
                /// A boolean field.
                pub x: bool,
                /// An anonymous model field.
                pub y: super::super::synthetic::OutputY,
            }
        }

        /// A trait representing the operations defined in the 'Example' namespace.
        pub trait Example {
            /// The error type which may be returned by this trait's operations.
            type Error<OperationError>;

            /// A freestanding operation.
            fn freestanding(
                &mut self,
            ) -> impl ::tsp_rust::OperationFuture<
                super::synthetic::FreestandingResponse,
                Self::Error<example::Error>,
            >;
        }
    }

    pub mod synthetic {
        #[derive(
            Debug,
            Clone,
            PartialEq,
            ::tsp_rust::vendored::serde::Deserialize,
            ::tsp_rust::vendored::serde::Serialize,
        )]
        #[serde(crate = "::tsp_rust::vendored::serde")]

        pub struct FreestandingResponse {
            pub example: Vec<u8>,
        }

        #[derive(
            Debug,
            Clone,
            PartialEq,
            Default,
            ::tsp_rust::vendored::serde::Deserialize,
            ::tsp_rust::vendored::serde::Serialize,
        )]
        #[serde(crate = "::tsp_rust::vendored::serde")]

        pub struct MpfdSuccessResponse {}

        #[derive(
            Debug,
            Clone,
            PartialEq,
            ::tsp_rust::vendored::serde::Deserialize,
            ::tsp_rust::vendored::serde::Serialize,
        )]
        #[serde(crate = "::tsp_rust::vendored::serde")]

        pub struct ErrorBody {
            pub message: String,
        }

        #[derive(
            Debug,
            Clone,
            PartialEq,
            ::tsp_rust::vendored::serde::Deserialize,
            ::tsp_rust::vendored::serde::Serialize,
        )]
        #[serde(crate = "::tsp_rust::vendored::serde")]

        pub struct OutputY {
            /// A decimal field.
            pub z: ::tsp_rust::vendored::bigdecimal::BigDecimal,
        }
    }
}

pub mod http {
    pub mod operations {
        pub mod raw {

            pub async fn freestanding<
                ResponseBody: ::tsp_rust::vendored::http_body::Body,
                S: ::tsp_rust::http::Service<ResponseBody>,
            >(
                service: &mut S,
            ) -> Result<
                super::super::super::models::synthetic::FreestandingResponse,
                ::tsp_rust::http::Error<
                    ResponseBody,
                    S::Error,
                    super::super::super::models::all::example::Error,
                >,
            > {
                use ::tsp_rust::http::Error;

                let request = ::tsp_rust::vendored::http::Request::builder()
                    .method("GET")
                    .uri("http://localhost:8080/freestanding")
                    .body(::tsp_rust::http::Body::new(Box::pin(
                        ::tsp_rust::vendored::futures::stream::empty(),
                    )))
                    .unwrap();

                let response = ::tsp_rust::http::send_request(service, request).await?;
                let (parts, body) = response.into_parts();

                match parts.status.as_u16() {
                    200 => ::tsp_rust::http::deserialize_body(body).await,
                    400 => Err(Error::Operation(
                        ::tsp_rust::http::deserialize_body(body).await?,
                    )),
                    _ => Err(Error::UnexpectedStatus(
                        ::tsp_rust::vendored::http::Response::from_parts(parts, body),
                    )),
                }
            }
        }
    }
}

#[allow(unused_imports)]
pub use models::all::example::*;
