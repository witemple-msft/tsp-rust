// Generated by Microsoft TypeSpec

pub mod models {
    pub mod all {
        /// Some namespace documentation.
        pub mod example {
            /// Some example operations.
            pub trait Operations {
                /// The error type which may be returned by this trait's operations.
                type Error<OperationError>;

                /// A POST operation that uses multipart/form-data.
                fn mpfd(
                    &self,
                    data: impl AsRef<[u8]>,
                ) -> impl ::tsp_rust::OperationFuture<
                    super::super::synthetic::MpfdOutput,
                    Self::Error<Box<dyn ::std::error::Error + Send>>,
                >;

                /// A POST operation that uses application/json.
                fn json(
                    &self,
                    payload: Foo,
                ) -> impl ::tsp_rust::OperationFuture<
                    Output,
                    Self::Error<Box<dyn ::std::error::Error + Send>>,
                >;
            }

            /// A Foo example model.
            #[derive(
                Debug,
                Clone,
                PartialEq,
                ::tsp_rust::vendored::serde::Deserialize,
                ::tsp_rust::vendored::serde::Serialize,
            )]
            #[serde(crate = "::tsp_rust::vendored::serde")]
            pub struct Foo {
                /// A string field.
                pub a: String,
                /// A number field.
                pub b: u32,
            }

            /// An Output example model.
            #[derive(
                Debug,
                Clone,
                PartialEq,
                ::tsp_rust::vendored::serde::Deserialize,
                ::tsp_rust::vendored::serde::Serialize,
            )]
            #[serde(crate = "::tsp_rust::vendored::serde")]
            pub struct Output {
                /// A boolean field.
                pub x: bool,
                /// An anonymous model field.
                pub y: super::super::synthetic::OutputY,
            }
        }

        /// A trait representing the operations defined in the 'Example' namespace.
        pub trait Example {
            /// The error type which may be returned by this trait's operations.
            type Error<OperationError>;

            /// A freestanding operation.
            fn freestanding(
                &self,
            ) -> impl ::tsp_rust::OperationFuture<
                super::synthetic::FreestandingOutput,
                Self::Error<Box<dyn ::std::error::Error + Send>>,
            >;
        }
    }

    pub mod synthetic {
        #[derive(
            Debug,
            Clone,
            PartialEq,
            ::tsp_rust::vendored::serde::Deserialize,
            ::tsp_rust::vendored::serde::Serialize,
        )]
        #[serde(crate = "::tsp_rust::vendored::serde")]
        pub struct FreestandingOutput {
            pub example: Vec<u8>,
        }

        #[derive(
            Debug,
            Clone,
            PartialEq,
            Default,
            ::tsp_rust::vendored::serde::Deserialize,
            ::tsp_rust::vendored::serde::Serialize,
        )]
        #[serde(crate = "::tsp_rust::vendored::serde")]
        pub struct MpfdOutput {}

        #[derive(
            Debug,
            Clone,
            PartialEq,
            ::tsp_rust::vendored::serde::Deserialize,
            ::tsp_rust::vendored::serde::Serialize,
        )]
        #[serde(crate = "::tsp_rust::vendored::serde")]
        pub struct OutputY {
            /// A decimal field.
            pub z: ::tsp_rust::vendored::bigdecimal::BigDecimal,
        }
    }
}

#[allow(unused_imports)]
pub use models::all::example::*;
