import {
  EmitContext,
  getService,
  Type,
  DiagnosticTarget,
  NoTarget,
  getEffectiveModelType,
} from "@typespec/compiler";
import { HttpService, getAuthentication } from "@typespec/http";
import { generateAuth } from "./auth.js";
import { parseCase } from "./case.js";
import { RustContext } from "./ctx.js";
import { indent } from "./indent.js";
import { emitOperations } from "./operation.js";
import { RustTranslation, getRustScalar } from "./scalars.js";
import { referencePath, vendoredModulePath } from "./vendored.js";
import { emitModels } from "./model.js";
import { emitOptions } from "./options.js";

export function emitRust(ctx: EmitContext, service: HttpService): string {
  const code: string[] = [];

  code.push("// Generated by Microsoft TypeSpec");
  code.push("");

  const { title, version } = getService(ctx.program, service.namespace) ?? {};
  const authenticationInfo = getAuthentication(ctx.program, service.namespace);

  const serviceNameCase = parseCase(title ?? "Service");

  const contextTypeName = serviceNameCase.pascalCase + "Context";
  const errorTypeName = serviceNameCase.pascalCase + "Error";

  const rustCtx: RustContext = {
    program: ctx.program,
    service,
    authenticationInfo,
    serviceTitle: title,
    serviceVersion: version,

    contextTypeName,
    errorTypeName,

    modelQueue: [],
    synthetics: [],
    visitedModels: new Set(),

    options: [],
  };

  const auth = generateAuth(rustCtx);

  const operations = [...emitOperations(rustCtx)];

  const options = [...emitOptions(rustCtx)];

  code.push(
    `use ${referencePath("QueryString")};`,
    `use ${referencePath("HeaderMap")};`,
    `use ${vendoredModulePath("itertools", "Itertools")};`,
    "",
    "pub mod service_info {",
    `  pub const TITLE: &str = "${title ?? ""}";`,
    `  pub const VERSION: &str = "${version ?? ""}";`,
    "}",
    "",
    "pub mod error {",
    `  use ${vendoredModulePath("thiserror")};`,
    "",
    "  #[derive(thiserror::Error, Debug)]",
    "  pub enum RequestError<E: Debug> {",
    '    #[error"Service error {0}: {1:?}")]',
    "    Service(u16, E),",
    "    #[error(transparent)]",
    `    Transport(#[from] ${vendoredModulePath("reqwest", "Error")}),`,
    `    #[error(transparent)]`,
    `    Json(#[from] ${vendoredModulePath("serde_json", "Error")}),`,
    `    #[error("Unknown error: {0:?}")]`,
    `    Unknown(Box<dyn std::error::Error + Send + Sync + 'static>),`,
    "  }",
    "}",
    "",
    ...auth.declarations,
    "#[non_exhaustive]",
    `pub struct ${contextTypeName} {`,
    // prettier-ignore
    `  client: ${vendoredModulePath("reqwest", "Client")},`,
    "  pub base_url: String,",
    ...indent(auth.config_lines),
    "}",
    "",
    `pub struct ${contextTypeName}Init {`,
    "  pub base_url: String,",
    ...indent(auth.config_lines),
    "}",
    "",
    `impl ${contextTypeName} {`,
    `  pub fn new(init: ${contextTypeName}Init) -> Self {`,
    `    Self {`,
    `      client: ${vendoredModulePath("reqwest", "Client")}::new(),`,
    `      base_url: init.base_url,`,
    ...auth.fields.map((field) => `      ${field}: init.${field},`),
    `    }`,
    `  }`,
    "}",
    "",
    "mod models {",
    ...indent(emitModels(rustCtx)),
    "}",
    "",
    ...options,
    ...operations
  );

  return code.join("\n");
}
